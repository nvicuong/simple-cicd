variables:
    PROJECT_USER: "onlineshop"
    DOCKER_IMAGE_NAME_AND_TAG: "${CI_REGISTRY_URL}/${CI_REGISTRY_PROJECT}/${CI_PROJECT_NAME}:${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_TAG}"
    SNYK_IMAGE: "kakarazi/snyk"
    SNYKSCAN_REPORT: "snyk_scan_${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}_report"
    TRIVYFS_REPORT: "trivyfs_scan_${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}_report"
    TRIVY_IMAGE_REPORT: "security_scan_image_${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}_report"

stages:
    - build
    - test source code
    - security scan image
    - push
    - deploy

build:
    variables:
        GIT_STRATEGY: clone
    stage: build
    before_script:
        - docker login -u ${CI_REGISTRY_USER} -p "${CI_REGISTRY_PASSWORD}" ${CI_REGISTRY_URL}
    script:
        - docker build -t ${DOCKER_IMAGE_NAME_AND_TAG} .
    after_script:
        - docker logout ${CI_REGISTRY_URL}
    tags:
        - build-shell
    only:
        - tags

trivyfs scan:
    stage: test source code
    variables:
        GIT_STRATEGY: clone
    script:
        - docker run --rm -v $PWD:/${CI_PROJECT_NAME} -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy fs /${CI_PROJECT_NAME} --severity HIGH,CRITICAL --format template --template "@contrib/html.tpl" --output /${CI_PROJECT_NAME}/$TRIVYFS_REPORT.html
        - sudo chown -R $USER:$USER .
    tags:
        - build-shell
    only:
        - tags
    artifacts:
        paths:
        - $TRIVYFS_REPORT.html
        expire_in: 1 day

snyk scan:
    variables:
      GIT_STRATEGY: clone
    stage: test source code
    before_script:
        - docker login -u ${DOCKERHUB_USER} -p "${DOCKERHUB_PASSWORD}" docker.io
    script:
      - docker run --name $SNYKSCAN_REPORT -v $PWD:/app ${SNYK_IMAGE} sh -c "cd /app; ls ; snyk auth ${SNYK_AUTH_TOKEN} && snyk test --json | snyk-to-html -o $SNYKSCAN_REPORT.html || true"
      - docker cp $SNYKSCAN_REPORT:/app/$SNYKSCAN_REPORT.html .
      - docker rm $SNYKSCAN_REPORT
      - sudo chown -R $USER:$USER .
    after_script:
        - docker logout docker.io
    tags:
        - build-shell
    only:
        - tags
    artifacts:
      paths:
        - ${SNYKSCAN_REPORT}.html
      expire_in: 1 day

trivy scan image:
    stage: security scan image
    variables:
        GIT_STRATEGY: none
    script:
        - docker run --rm -v $(pwd):/${CI_PROJECT_NAME} -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy clean --all
        - docker run --rm -v $(pwd):/${CI_PROJECT_NAME} -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --format template --template "@contrib/html.tpl" --output /${CI_PROJECT_NAME}/${TRIVY_IMAGE_REPORT}.html ${DOCKER_IMAGE_NAME_AND_TAG}
        - sudo chown -R $USER:$USER .
    tags:
        - build-shell
    only:
        - tags
    artifacts:
        paths:
        - ${TRIVY_IMAGE_REPORT}.html
        expire_in: 1 day



push:
    variables:
        GIT_STRATEGY: none
    stage: push
    before_script:
        - docker login -u ${CI_REGISTRY_USER} -p "${CI_REGISTRY_PASSWORD}" ${CI_REGISTRY_URL}
    script:
        - docker push ${DOCKER_IMAGE_NAME_AND_TAG}
    after_script:
        - docker logout ${CI_REGISTRY_URL}
    tags:
        - build-shell
    only:
        - tags

deploy:
    variables:
        GIT_STRATEGY: none
    stage: deploy
    before_script:
        - docker login -u ${CI_REGISTRY_USER} -p "${CI_REGISTRY_PASSWORD}" ${CI_REGISTRY_URL}
    script:
        - sudo su ${PROJECT_USER} -c "docker pull ${DOCKER_IMAGE_NAME_AND_TAG}; docker rm -f ${CI_PROJECT_NAME}; docker run --name ${CI_PROJECT_NAME} -dp ${BE_PORT}:${BE_PORT} ${DOCKER_IMAGE_NAME_AND_TAG} "
    after_script:
        - docker logout ${CI_REGISTRY_URL}
    tags:
        - deploy-shell
    only:
        - tags
